{"ast":null,"code":"var _jsxFileName = \"/home/vjac/Work/BTP/dijkstra/src/App.js\";\nimport React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious, SkipNext, RotateLeft } from '@material-ui/icons';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\nimport Node from './Node/Node'; // style\n\nimport './App.css'; // algorithms\n\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport dijkstra from './algorithms/dijkstra';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      //colorKey: [],\n      arraySteps: [],\n      //colorSteps: [],\n      currentStep: 0,\n      timeouts: [],\n      algorithm: 'Dijkstra',\n      //barCount: 100,\n      delay: 200,\n      mouseIsPressed: false\n    };\n    this.ALGO_SET = {\n      'Bubble Sort': bubbleSort,\n      'Merge Sort': mergeSort,\n      'Quick Sort': quickSort,\n      'Dijkstra': dijkstra\n    };\n\n    this.generateSteps = () => {\n      let array = this.state.array.slice();\n      let steps = this.state.arraySteps.slice(); //let colorSteps = this.state.colorSteps.slice();\n\n      const startNode = array[START_NODE_ROW][START_NODE_COL];\n      const finishNode = array[FINISH_NODE_ROW][FINISH_NODE_COL];\n      this.ALGO_SET[this.state.algorithm](array, startNode, finishNode, steps); //this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n      this.setState({\n        arraySteps: steps //colorSteps: colorSteps,\n\n      });\n    };\n\n    this.stepBack = () => {\n      if (this.state.currentStep === 0) return;\n      this.clearTimeouts();\n      let currentStep = this.state.currentStep - 1;\n      this.setState({\n        array: this.state.arraySteps[currentStep],\n        //colorKey: this.state.colorSteps[currentStep],\n        currentStep: currentStep\n      });\n    };\n\n    this.stepForward = () => {\n      if (this.state.currentStep >= this.state.arraySteps.length - 1) return;\n      this.clearTimeouts();\n      let currentStep = this.state.currentStep + 1;\n      this.setState({\n        array: this.state.arraySteps[currentStep],\n        //colorKey: this.state.colorSteps[currentStep],\n        currentStep: currentStep\n      });\n    };\n\n    this.changeAlgorithm = event => {\n      this.setState({\n        algorithm: event.target.value,\n        currentStep: 0,\n        arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]]\n      }, () => this.generateSteps());\n      this.clearTimeouts(); //this.clearColorKey();\n    };\n\n    this.changeDelay = event => {\n      this.clearTimeouts();\n      this.setState({\n        delay: parseInt(event.target.value)\n      });\n    };\n\n    this.clearTimeouts = () => {\n      this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n      this.setState({\n        timeouts: []\n      });\n    };\n\n    this.createNode = (col, row) => {\n      return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null\n      };\n    };\n\n    this.getNewGridWithWallToggled = (grid, row, col) => {\n      const newGrid = grid.slice();\n      const node = newGrid[row][col];\n      const newNode = { ...node,\n        isWall: !node.isWall\n      };\n      newGrid[row][col] = newNode;\n      return newGrid;\n    };\n\n    this.generateBars = () => {\n      this.clearTimeouts(); //this.clearColorKey();\n      //let barCount = parseInt(this.state.barCount);\n      //let barsTemp = [];\n      //for (let i = 0; i < barCount; i++) {\n      //barsTemp.push(Math.floor(Math.random() * 90) + 10);\n      //}\n\n      const grid = [];\n\n      for (let row = 0; row < 25; row++) {\n        const currentRow = [];\n\n        for (let col = 0; col < 50; col++) {\n          currentRow.push(createNode(col, row));\n        }\n\n        grid.push(currentRow);\n      }\n\n      this.setState({\n        array: grid,\n        //array: barsTemp,\n        //arraySteps: [barsTemp],\n        arraySteps: [grid],\n        //barCount: barCount,\n        currentStep: 0\n      }, () => this.generateSteps());\n    };\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps; //let colorSteps = this.state.colorSteps;\n\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep] //colorKey: colorSteps[currentStep],\n          //currentStep: currentStep + 1,\n\n        });\n      }, this.state.delay * i);\n      timeouts.push(timeout);\n      i++;\n    }\n\n    this.setState({\n      timeouts: timeouts\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.array, row, col);\n    this.setState({\n      array: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.array, row, col);\n    this.setState({\n      array: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  render() {\n    //let barsDiv = this.state.array.map((value, index) => <Bar\n    //key={index}\n    //length={value}\n    //colorKey={this.state.colorKey[index]}\n    ///>);\n    let playButton; // Set player controls\n\n    if (this.state.timeouts.length !== 0 && this.state.currentStep !== this.state.arraySteps.length) {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => this.clearTimeouts(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Pause, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.currentStep === this.state.arraySteps.length) {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        color: \"secondary\",\n        onClick: () => this.generateBars(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(RotateLeft, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        color: \"secondary\",\n        onClick: () => this.setTimeouts(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PlayArrow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }\n      }));\n    } //<section className=\"bars container card\">\n    //    {barsDiv}                                           <--------- was inside render at the beginning\n    //</section>\n    //<Form                                                     <--------- was there for changing the size of array\n    //      formLabel=\"Array size\"\n    //      values={[10, 25, 50]}\n    //      labels={['10 items', '25 items', '50 items']}\n    //      currentValue={this.state.barCount}\n    //      onChange={e => this.changeBarCount(e.target.value)}\n    ///>\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isStart,\n          isFinish,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          row: row,\n          col: col,\n          isStart: isStart,\n          isFinish: isFinish,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 23\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"container-small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => this.generateBars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RotateLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.stepBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SkipPrevious, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    })), playButton, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.stepForward,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SkipNext, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"controls container-small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      formLabel: \"Algorithm\",\n      values: ['Bubble Sort', 'Merge Sort', 'Quick Sort', 'Dijkstra'],\n      labels: ['Bubble Sort', 'Merge Sort', 'Quick Sort', 'Dijkstra'],\n      currentValue: this.state.algorithm,\n      onChange: this.changeAlgorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      formLabel: \"Speed\",\n      values: [200, 100, 50],\n      labels: ['1x', '2x', '4x'],\n      currentValue: this.state.delay,\n      onChange: this.changeDelay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vjac/Work/BTP/dijkstra/src/App.js"],"names":["React","IconButton","PlayArrow","Pause","SkipPrevious","SkipNext","RotateLeft","Bar","Form","Node","bubbleSort","mergeSort","quickSort","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","App","Component","state","array","arraySteps","currentStep","timeouts","algorithm","delay","mouseIsPressed","ALGO_SET","generateSteps","slice","steps","startNode","finishNode","setState","stepBack","clearTimeouts","stepForward","length","changeAlgorithm","event","target","value","changeDelay","parseInt","forEach","timeout","clearTimeout","createNode","col","row","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","grid","newGrid","node","newNode","generateBars","currentRow","push","componentDidMount","setTimeouts","i","setTimeout","handleMouseDown","handleMouseEnter","handleMouseUp","render","playButton","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious, SkipNext, RotateLeft } from '@material-ui/icons';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\nimport Node from './Node/Node';\n\n// style\nimport './App.css';\n\n// algorithms\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport dijkstra from './algorithms/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    //colorKey: [],\n    arraySteps: [],\n    //colorSteps: [],\n    currentStep: 0,\n    timeouts: [],\n    algorithm: 'Dijkstra',\n    //barCount: 100,\n    delay: 200,\n    mouseIsPressed: false,\n  }\n\n  ALGO_SET = {\n    'Bubble Sort': bubbleSort,\n    'Merge Sort': mergeSort,\n    'Quick Sort': quickSort,\n    'Dijkstra': dijkstra,\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  generateSteps = () => {\n    let array = this.state.array.slice();\n    let steps = this.state.arraySteps.slice();\n    //let colorSteps = this.state.colorSteps.slice();\n\n    const startNode = array[START_NODE_ROW][START_NODE_COL];\n    const finishNode = array[FINISH_NODE_ROW][FINISH_NODE_COL];\n    this.ALGO_SET[this.state.algorithm](array, startNode, finishNode, steps)\n    //this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n    this.setState({\n      arraySteps: steps,\n      //colorSteps: colorSteps,\n    });\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps;\n    //let colorSteps = this.state.colorSteps;\n\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep],\n          //colorKey: colorSteps[currentStep],\n          //currentStep: currentStep + 1,\n        });\n      }, this.state.delay * (i));\n      timeouts.push(timeout);\n      i++;\n    }\n\n    this.setState({\n      timeouts: timeouts,\n    });\n  }\n\n  stepBack = () => {\n    if (this.state.currentStep === 0) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep - 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      //colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  stepForward = () => {\n    if (this.state.currentStep >= this.state.arraySteps.length - 1) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep + 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      //colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  changeAlgorithm = (event) => {\n    this.setState({\n      algorithm: event.target.value,\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    //this.clearColorKey();\n  };\n\n  //changeBarCount = (barCount) => {\n    //this.setState({ barCount: barCount }, () => this.generateBars());\n  //}\n\n  changeDelay = (event) => {\n    this.clearTimeouts();\n    this.setState({\n      delay: parseInt(event.target.value),\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n    this.setState({\n      timeouts: [],\n    })\n  }\n\n  createNode = (col, row) => {\n    return {\n       col,\n       row,\n       isStart: row === START_NODE_ROW && col === START_NODE_COL,\n       isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n       distance: Infinity,\n       isVisited: false,\n       isWall: false,\n       previousNode: null\n    };\n  };\n \n  getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n       ...node,\n       isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  //clearColorKey = () => {\n    //let blankKey = new Array(parseInt(this.state.barCount)).fill(0);\n    //this.setState({\n      //colorKey: blankKey,\n      //colorSteps: [blankKey],\n    //});\n  //}\n\n  generateBars = () => {\n    this.clearTimeouts();\n    //this.clearColorKey();\n\n    //let barCount = parseInt(this.state.barCount);\n    //let barsTemp = [];\n\n    //for (let i = 0; i < barCount; i++) {\n      //barsTemp.push(Math.floor(Math.random() * 90) + 10);\n    //}\n\n    const grid = [];\n    for(let row=0; row<25; row++){\n      const currentRow = [];\n      for(let col = 0; col < 50; col++){\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n\n    this.setState({\n      array: grid,\n      //array: barsTemp,\n      //arraySteps: [barsTemp],\n      arraySteps: [grid],\n      //barCount: barCount,\n      currentStep: 0,\n    }, () => this.generateSteps());\n  }\n\n  handleMouseDown(row, col){\n    const newGrid = getNewGridWithWallToggled(this.state.array, row, col);\n    this.setState({array: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col){\n    if(!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.array, row, col);\n    this.setState({array: newGrid});\n  }\n\n  handleMouseUp(){\n    this.setState({mouseIsPressed: false});\n  }\n\n  render() {\n    //let barsDiv = this.state.array.map((value, index) => <Bar\n      //key={index}\n      //length={value}\n      //colorKey={this.state.colorKey[index]}\n    ///>);\n    let playButton;\n\n    // Set player controls\n    if (this.state.timeouts.length !== 0 && this.state.currentStep !== this.state.arraySteps.length) {\n      playButton = (\n        <IconButton onClick={() => this.clearTimeouts()} >\n          <Pause />\n        </IconButton>\n      );\n    } else if (this.state.currentStep === this.state.arraySteps.length) {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.generateBars()} >\n          <RotateLeft />\n        </IconButton>\n      )\n    } else {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.setTimeouts()} >\n          <PlayArrow />\n        </IconButton>);\n    }\n\n    //<section className=\"bars container card\">\n      //    {barsDiv}                                           <--------- was inside render at the beginning\n    //</section>\n\n    //<Form                                                     <--------- was there for changing the size of array\n      //      formLabel=\"Array size\"\n      //      values={[10, 25, 50]}\n      //      labels={['10 items', '25 items', '50 items']}\n      //      currentValue={this.state.barCount}\n      //      onChange={e => this.changeBarCount(e.target.value)}\n    ///>\n    return (\n      <div className=\"App\">\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node,nodeIdx) => {\n                    const {row, col, isStart, isFinish, isWall} = node;\n                    return (\n                      <Node\n                          key={nodeIdx}\n                          row={row}\n                          col={col}\n                          isStart={isStart}\n                          isFinish={isFinish}\n                          isWall={isWall}\n                          mouseIsPressed={mouseIsPressed}\n                          onMouseDown={(row, col) => this.handleMouseDown(row,col)}\n                          onMouseEnter={(row, col) => this.handleMouseEnter(row,col)}\n                          onMouseUp={() => this.handleMouseUp()}\n                      ></Node>\n                    );\n                })}\n              </div>\n            )\n          })}\n        </div>\n\n        <section className=\"container-small\">\n          <IconButton onClick={() => this.generateBars()} >\n            <RotateLeft />\n          </IconButton>\n          <IconButton onClick={this.stepBack} >\n            <SkipPrevious />\n          </IconButton>\n          {playButton}\n          <IconButton onClick={this.stepForward} >\n            <SkipNext />\n          </IconButton>\n          <IconButton />\n        </section>\n\n        <section className=\"controls container-small\">\n          <Form\n            formLabel=\"Algorithm\"\n            values={['Bubble Sort', 'Merge Sort', 'Quick Sort', 'Dijkstra']}\n            labels={['Bubble Sort', 'Merge Sort', 'Quick Sort', 'Dijkstra']}\n            currentValue={this.state.algorithm}\n            onChange={this.changeAlgorithm}\n          />\n\n          <Form\n            formLabel=\"Speed\"\n            values={[200, 100, 50]}\n            labels={['1x', '2x', '4x']}\n            currentValue={this.state.delay}\n            onChange={this.changeDelay}\n          />\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}