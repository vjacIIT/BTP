{"ast":null,"code":"var _jsxFileName = \"/home/vjac/Work/BTP/dijkstra/src/App.js\";\nimport React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious, SkipNext, RotateLeft } from '@material-ui/icons';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\nimport Node from './Node/Node'; // style\n\nimport './App.css'; // algorithms\n\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport dijkstra from './algorithms/dijkstra';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      //colorKey: [],\n      arraySteps: [],\n      //colorSteps: [],\n      currentStep: 0,\n      timeouts: [],\n      algorithm: 'Bubble Sort',\n      //barCount: 100,\n      delay: 200\n    };\n    this.ALGO_SET = {\n      'Bubble Sort': bubbleSort,\n      'Merge Sort': mergeSort,\n      'Quick Sort': quickSort,\n      'Dijkstra': dijkstra\n    };\n\n    this.generateSteps = () => {\n      let array = this.state.array.slice();\n      let steps = this.state.arraySteps.slice(); //let colorSteps = this.state.colorSteps.slice();\n\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      this.ALGO_SET[this.state.algorithm](array, startNode, finishNode, trace); //this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n      this.setState({\n        arraySteps: steps,\n        colorSteps: colorSteps\n      });\n    };\n\n    this.stepBack = () => {\n      if (this.state.currentStep === 0) return;\n      this.clearTimeouts();\n      let currentStep = this.state.currentStep - 1;\n      this.setState({\n        array: this.state.arraySteps[currentStep],\n        colorKey: this.state.colorSteps[currentStep],\n        currentStep: currentStep\n      });\n    };\n\n    this.stepForward = () => {\n      if (this.state.currentStep >= this.state.arraySteps.length - 1) return;\n      this.clearTimeouts();\n      let currentStep = this.state.currentStep + 1;\n      this.setState({\n        array: this.state.arraySteps[currentStep],\n        colorKey: this.state.colorSteps[currentStep],\n        currentStep: currentStep\n      });\n    };\n\n    this.changeAlgorithm = event => {\n      this.setState({\n        algorithm: event.target.value,\n        currentStep: 0,\n        arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]]\n      }, () => this.generateSteps());\n      this.clearTimeouts();\n      this.clearColorKey();\n    };\n\n    this.changeDelay = event => {\n      this.clearTimeouts();\n      this.setState({\n        delay: parseInt(event.target.value)\n      });\n    };\n\n    this.clearTimeouts = () => {\n      this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n      this.setState({\n        timeouts: []\n      });\n    };\n\n    this.generateBars = () => {\n      this.clearTimeouts(); //this.clearColorKey();\n      //let barCount = parseInt(this.state.barCount);\n      //let barsTemp = [];\n      //for (let i = 0; i < barCount; i++) {\n      //barsTemp.push(Math.floor(Math.random() * 90) + 10);\n      //}\n\n      const grid = [];\n\n      for (let row = 0; row < 25; row++) {\n        const currentRow = [];\n\n        for (let col = 0; col < 50; col++) {\n          currentRow.push(createNode(col, row));\n        }\n\n        grid.push(currentRow);\n      }\n\n      this.setState({\n        array: grid,\n        //array: barsTemp,\n        //arraySteps: [barsTemp],\n        arraySteps: [grid],\n        //barCount: barCount,\n        currentStep: 0\n      }, () => this.generateSteps());\n    };\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps;\n    let colorSteps = this.state.colorSteps;\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep],\n          colorKey: colorSteps[currentStep],\n          currentStep: currentStep + 1\n        });\n      }, this.state.delay * i);\n      timeouts.push(timeout);\n      i++;\n    }\n\n    this.setState({\n      timeouts: timeouts\n    });\n  }\n\n  render() {\n    //let barsDiv = this.state.array.map((value, index) => <Bar\n    //key={index}\n    //length={value}\n    //colorKey={this.state.colorKey[index]}\n    ///>);\n    let playButton; // Set player controls\n\n    if (this.state.timeouts.length !== 0 && this.state.currentStep !== this.state.arraySteps.length) {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => this.clearTimeouts(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Pause, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }));\n    } else if (this.state.currentStep === this.state.arraySteps.length) {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        color: \"secondary\",\n        onClick: () => this.generateBars(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(RotateLeft, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      playButton = /*#__PURE__*/React.createElement(IconButton, {\n        color: \"secondary\",\n        onClick: () => this.setTimeouts(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(PlayArrow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"bars container card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, barsDiv), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"container-small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => this.generateBars(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RotateLeft, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.stepBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SkipPrevious, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    })), playButton, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: this.stepForward,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SkipNext, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(IconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"controls container-small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      formLabel: \"Algorithm\",\n      values: ['Bubble Sort', 'Merge Sort', 'Quick Sort'],\n      labels: ['Bubble Sort', 'Merge Sort', 'Quick Sort'],\n      currentValue: this.state.algorithm,\n      onChange: this.changeAlgorithm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      formLabel: \"Array size\",\n      values: [10, 25, 50],\n      labels: ['10 items', '25 items', '50 items'],\n      currentValue: this.state.barCount,\n      onChange: e => this.changeBarCount(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      formLabel: \"Speed\",\n      values: [200, 100, 50],\n      labels: ['1x', '2x', '4x'],\n      currentValue: this.state.delay,\n      onChange: this.changeDelay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nexport default App;","map":{"version":3,"sources":["/home/vjac/Work/BTP/dijkstra/src/App.js"],"names":["React","IconButton","PlayArrow","Pause","SkipPrevious","SkipNext","RotateLeft","Bar","Form","Node","bubbleSort","mergeSort","quickSort","dijkstra","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","App","Component","state","array","arraySteps","currentStep","timeouts","algorithm","delay","ALGO_SET","generateSteps","slice","steps","startNode","grid","finishNode","trace","setState","colorSteps","stepBack","clearTimeouts","colorKey","stepForward","length","changeAlgorithm","event","target","value","clearColorKey","changeDelay","parseInt","forEach","timeout","clearTimeout","generateBars","row","currentRow","col","push","createNode","componentDidMount","setTimeouts","i","setTimeout","render","playButton","barsDiv","barCount","e","changeBarCount","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","node","newNode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { PlayArrow, Pause, SkipPrevious, SkipNext, RotateLeft } from '@material-ui/icons';\nimport Bar from './components/Bar';\nimport Form from './components/Form';\nimport Node from './Node/Node';\n\n// style\nimport './App.css';\n\n// algorithms\nimport bubbleSort from './algorithms/bubbleSort';\nimport mergeSort from './algorithms/mergeSort';\nimport quickSort from './algorithms/quickSort';\nimport dijkstra from './algorithms/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nclass App extends React.Component {\n  state = {\n    array: [],\n    //colorKey: [],\n    arraySteps: [],\n    //colorSteps: [],\n    currentStep: 0,\n    timeouts: [],\n    algorithm: 'Bubble Sort',\n    //barCount: 100,\n    delay: 200,\n  }\n\n  ALGO_SET = {\n    'Bubble Sort': bubbleSort,\n    'Merge Sort': mergeSort,\n    'Quick Sort': quickSort,\n    'Dijkstra': dijkstra,\n  }\n\n  componentDidMount() {\n    this.generateBars();\n  }\n\n  generateSteps = () => {\n    let array = this.state.array.slice();\n    let steps = this.state.arraySteps.slice();\n    //let colorSteps = this.state.colorSteps.slice();\n\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    this.ALGO_SET[this.state.algorithm](array, startNode, finishNode, trace)\n    //this.ALGO_SET[this.state.algorithm](array, 0, steps, colorSteps);\n\n    this.setState({\n      arraySteps: steps,\n      colorSteps: colorSteps,\n    });\n  }\n\n  setTimeouts() {\n    let steps = this.state.arraySteps;\n    let colorSteps = this.state.colorSteps;\n\n    this.clearTimeouts();\n    let timeouts = [];\n    let i = 0;\n\n    while (i < steps.length - this.state.currentStep) {\n      let timeout = setTimeout(() => {\n        let currentStep = this.state.currentStep;\n        this.setState({\n          array: steps[currentStep],\n          colorKey: colorSteps[currentStep],\n          currentStep: currentStep + 1,\n        });\n      }, this.state.delay * (i));\n      timeouts.push(timeout);\n      i++;\n    }\n\n    this.setState({\n      timeouts: timeouts,\n    });\n  }\n\n  stepBack = () => {\n    if (this.state.currentStep === 0) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep - 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  stepForward = () => {\n    if (this.state.currentStep >= this.state.arraySteps.length - 1) return;\n    this.clearTimeouts();\n\n    let currentStep = this.state.currentStep + 1;\n    this.setState({\n      array: this.state.arraySteps[currentStep],\n      colorKey: this.state.colorSteps[currentStep],\n      currentStep: currentStep,\n    });\n  }\n\n  changeAlgorithm = (event) => {\n    this.setState({\n      algorithm: event.target.value,\n      currentStep: 0,\n      arraySteps: [this.state.arraySteps[this.state.currentStep === 0 ? 0 : this.state.currentStep - 1]],\n    }, () => this.generateSteps());\n    this.clearTimeouts();\n    this.clearColorKey();\n  };\n\n  //changeBarCount = (barCount) => {\n    //this.setState({ barCount: barCount }, () => this.generateBars());\n  //}\n\n  changeDelay = (event) => {\n    this.clearTimeouts();\n    this.setState({\n      delay: parseInt(event.target.value),\n    });\n  };\n\n  clearTimeouts = () => {\n    this.state.timeouts.forEach(timeout => clearTimeout(timeout));\n    this.setState({\n      timeouts: [],\n    })\n  }\n\n  //clearColorKey = () => {\n    //let blankKey = new Array(parseInt(this.state.barCount)).fill(0);\n    //this.setState({\n      //colorKey: blankKey,\n      //colorSteps: [blankKey],\n    //});\n  //}\n\n  generateBars = () => {\n    this.clearTimeouts();\n    //this.clearColorKey();\n\n    //let barCount = parseInt(this.state.barCount);\n    //let barsTemp = [];\n\n    //for (let i = 0; i < barCount; i++) {\n      //barsTemp.push(Math.floor(Math.random() * 90) + 10);\n    //}\n\n    const grid = [];\n    for(let row=0; row<25; row++){\n      const currentRow = [];\n      for(let col = 0; col < 50; col++){\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n\n    this.setState({\n      array: grid,\n      //array: barsTemp,\n      //arraySteps: [barsTemp],\n      arraySteps: [grid],\n      //barCount: barCount,\n      currentStep: 0,\n    }, () => this.generateSteps());\n  }\n\n  render() {\n    //let barsDiv = this.state.array.map((value, index) => <Bar\n      //key={index}\n      //length={value}\n      //colorKey={this.state.colorKey[index]}\n    ///>);\n    let playButton;\n\n    // Set player controls\n    if (this.state.timeouts.length !== 0 && this.state.currentStep !== this.state.arraySteps.length) {\n      playButton = (\n        <IconButton onClick={() => this.clearTimeouts()} >\n          <Pause />\n        </IconButton>\n      );\n    } else if (this.state.currentStep === this.state.arraySteps.length) {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.generateBars()} >\n          <RotateLeft />\n        </IconButton>\n      )\n    } else {\n      playButton = (\n        <IconButton color=\"secondary\" onClick={() => this.setTimeouts()} >\n          <PlayArrow />\n        </IconButton>);\n    }\n\n    return (\n      <div className=\"App\">\n        <section className=\"bars container card\">\n          {barsDiv}\n        </section>\n\n        <section className=\"container-small\">\n          <IconButton onClick={() => this.generateBars()} >\n            <RotateLeft />\n          </IconButton>\n          <IconButton onClick={this.stepBack} >\n            <SkipPrevious />\n          </IconButton>\n          {playButton}\n          <IconButton onClick={this.stepForward} >\n            <SkipNext />\n          </IconButton>\n          <IconButton />\n        </section>\n\n        <section className=\"controls container-small\">\n          <Form\n            formLabel=\"Algorithm\"\n            values={['Bubble Sort', 'Merge Sort', 'Quick Sort']}\n            labels={['Bubble Sort', 'Merge Sort', 'Quick Sort']}\n            currentValue={this.state.algorithm}\n            onChange={this.changeAlgorithm}\n          />\n\n          <Form\n            formLabel=\"Array size\"\n            values={[10, 25, 50]}\n            labels={['10 items', '25 items', '50 items']}\n            currentValue={this.state.barCount}\n            onChange={e => this.changeBarCount(e.target.value)}\n          />\n\n          <Form\n            formLabel=\"Speed\"\n            values={[200, 100, 50]}\n            labels={['1x', '2x', '4x']}\n            currentValue={this.state.delay}\n            onChange={this.changeDelay}\n          />\n        </section>\n      </div>\n    )\n  }\n}\n\nconst createNode = (col, row) => {\n  return {\n     col,\n     row,\n     isStart: row === START_NODE_ROW && col === START_NODE_COL,\n     isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n     distance: Infinity,\n     isVisited: false,\n     isWall: false,\n     previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n     ...node,\n     isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}